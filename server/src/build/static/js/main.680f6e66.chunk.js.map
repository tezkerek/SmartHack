{"version":3,"sources":["components/Navbar.tsx","components/Footer.tsx","components/SignIn.tsx","components/SignUp.tsx","components/dashComponents/Popup.tsx","components/dashComponents/KeysPopup.tsx","components/dashComponents/StoredPassword.tsx","crypto.ts","components/Dashboard.tsx","components/Home.tsx","App.tsx","index.tsx"],"names":["Navbar","page","useState","action","setAction","useEffect","className","to","href","target","Footer","SignIn","setToken","setPass","signinDetails","setSigninDetails","handleChange","e","value","type","name","handleSubmit","a","preventDefault","fetch","method","headers","body","JSON","stringify","then","res","json","result","status","console","log","sessionStorage","setItem","data","window","location","alert","error","onSubmit","placeholder","onChange","SignUp","signUpDetails","setSignUpDetails","code","Popup","handleClose","content","onClick","KeysPopup","StoredPassword","website","password","id","passwordEntries","setPasswordEntries","index","passwordShown","setPasswordShown","readOnly","copy","slice","getItem","generatePassword","config","availableChars","includeSymbols","includeUppercase","includeDigits","Array","apply","length","map","byteArr","Uint8Array","crypto","getRandomValues","char","String","fromCharCode","includes","this","join","defaultValue","symbol","uppercase","numbers","Dashboard","pass","token","isOpen","setIsOpen","isKeysOpen","setIsKeysOpen","passwordGeneratorConfig","setPasswordGeneratorConfig","newPassword","setNewPassword","newKey","setNewKey","keyEntries","setKeyEntries","getEntries","togglePopup","toggleKeysPopup","username","_id","keyHandleSubmit","checked","handleChecks","keyHandleChange","passwordsContent","required","x","keysContent","item","Home","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.680f6e66.chunk.js","sourcesContent":["import React, {useState, useEffect} from \"react\"\nimport {Link} from \"react-router-dom\"\n\nfunction Navbar({page}) {\n    const [action, setAction] = useState(\"\")\n    \n    // eslint-disable-next-line\n    useEffect(() => {\n        if (page === \"Sign up\") \n            setAction(\"Sign in\")\n        else if(page === \"Home\")\n            setAction(\"@andreihodo\")\n      });\n\n    return (\n        <div className=\"navbar\">\n            <Link to=\"/\" className=\"a-tag\">\n                <h1 className=\"title\">Lorem ipsum</h1>\n            </Link>\n\n            <div className=\"mini-navbar\">\n                <div className=\"links\">\n                    <Link to=\"/\" className=\"a-tag\">\n                        <p className=\"link\">Home</p>\n                    </Link>\n                    <a href=\"https://twitter.com/andreihodo\" target=\"_blank\"><p className=\"link\">Help</p></a>\n                    <Link to=\"/signup\" className=\"a-tag\">\n                        <p className=\"link\">{page}</p>\n                    </Link>\n                </div>\n\n            </div>\n\n            <div className=\"navbar-action\">\n                <Link to=\"/signin\">\n                    <button className=\"navbar-btn\">{action}</button>\n                </Link>\n            </div>\n        </div>\n    )\n}\n\nexport default Navbar","import React from \"react\"\n\nfunction Footer() {\n    return (\n        <div className=\"footer\">\n            <p>Made with love by Looney Toons.</p>\n        </div>\n    )\n}\n\nexport default Footer","import React, {useState} from \"react\"\n\nfunction SignIn({setToken,setPass}) {\n    const [signinDetails, setSigninDetails] = useState({})\n\n    const handleChange = (e) => {\n        const target = e.target;\n        const value = target.type === 'password' ? target.value : target.value;\n        const name = target.name;\n        setSigninDetails({\n            ...signinDetails,\n            [name]: value\n        })\n    }\n \n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        const result = await fetch('/login', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(signinDetails)\n        }).then((res)=>res.json())\n\n        if(result.status === \"ok\") {\n            console.log(result);\n            sessionStorage.setItem(\"token\",result.data)\n            sessionStorage.setItem(\"crpt\",signinDetails['password'])\n            window.location.href = \"/dashboard\"; \n        } else {\n            alert(result.error)\n        }\n\n        // Clear input fields\n        setSigninDetails({})\n    }\n\n    return (\n        <div className=\"signin-container\">\n            <h1>Sign in</h1>\n            <p>Sign in and start generating passwords</p>\n            <form className=\"signin-form\" onSubmit={handleSubmit}>\n                <input type=\"text\"\n                    name=\"username\"\n                    placeholder=\"Username\"\n                    className=\"input-username\"\n                    onChange={handleChange}\n                    />\n                <input type=\"password\"\n                    name=\"password\"\n                    placeholder=\"Password\"\n                    className=\"input-password\"\n                    onChange={handleChange}\n                />\n\n                <button type=\"submit\" \n                    onSubmit={handleSubmit}\n                    className=\"signin-btn\">\n                        Sign in\n                </button>\n            </form>\n        </div>\n    )\n}\n\nexport default SignIn","import React, {useState} from \"react\"\n\nfunction SignUp() {\n    const [signUpDetails, setSignUpDetails] = useState({})\n\n    const handleChange = (e) => {\n        const target = e.target;\n        const value = target.type === 'password' ? target.value : target.value;\n        const name = target.name;\n        setSignUpDetails({\n            ...signUpDetails,\n            [name]: value\n        })\n    }\n \n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        const result = await fetch('/register', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(signUpDetails)\n        }).then((res)=>res.json())\n\n        if(result.status === \"ok\") {\n            window.location.href = '/signin'\n        } else {\n            if(result.error.code === 11000) {\n                alert(\"Username is already in use!\");\n            } else {\n                alert(\"Eroare!\");\n                console.log(result.error);\n            }\n        }\n        // Clear input fields\n        setSignUpDetails({})\n    }\n\n    return (\n        <div className=\"signup-container\">\n            <h1>Sign up</h1>\n            <p>Create new account</p>\n            <form className=\"signup-form\" onSubmit={handleSubmit}>\n                <input type=\"text\"\n                    name=\"username\"\n                    placeholder=\"Username\"\n                    className=\"input-username\"\n                    onChange={handleChange}\n                    />\n                <input type=\"password\"\n                    name=\"password\"\n                    placeholder=\"Password\"\n                    className=\"input-password\"\n                    onChange={handleChange}\n                />\n\n                <button type=\"submit\" \n                    onSubmit={handleSubmit}\n                    className=\"signup-btn\">\n                        Sign up\n                </button>\n            </form>\n        </div>\n    )\n}\n\nexport default SignUp","import React from \"react\";\n \nconst Popup = ({handleClose, content}) => {\n  return (\n    <div className=\"popup-box\">\n      <div className=\"box\">\n        <span className=\"close-icon\" onClick={handleClose}>x</span>\n        {content}\n      </div>\n    </div>\n  );\n};\n \nexport default Popup;","import React from \"react\";\n \nconst KeysPopup = ({handleClose, content}) => {\n  return (\n    <div className=\"popup-box\">\n      <div className=\"box\">\n        <span className=\"close-icon\" onClick={handleClose}>x</span>\n        {content}\n      </div>\n    </div>\n  );\n};\n \nexport default KeysPopup;","import React, {useState} from \"react\"\n\nfunction StoredPassword({website, password,id,passwordEntries,setPasswordEntries,index,type}) {\n    const [passwordShown, setPasswordShown] = useState(false);\n\n    return (\n        <div className=\"stored-password\">\n            <p>{website}</p>\n            <input \n                type={passwordShown ? \"text\" : \"password\"}\n                className=\"stored-password-input\"\n                value={password} \n                readOnly\n            />\n            <button className=\"showhide-btn\"\n                onClick={() => setPasswordShown(!passwordShown)}>\n                    {passwordShown ? \"Hide\" : \"Show\"}\n            </button>\n            <button className=\"delete-btn\" onClick={async()=>{\n                let copy = [...passwordEntries]\n                copy.slice(index,1)\n                setPasswordEntries(copy)\n                const result = await fetch(`/entries/${type}/${id}`, {\n                    method: 'DELETE',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization':sessionStorage.getItem(\"token\"),\n                    }\n                }).then((res)=>res.json())\n                if(result.status === 'error')\n                    alert(result.error)\n            }}>Delete</button>\n        </div>\n    )\n}\n\nexport default StoredPassword","import forge from 'node-forge'\r\n\r\nexport const salt = '£2ÌF×¶ÓÚØjÍç§UkA:4¾âíÑ¤ØÀßè.dhî▼§ÄVCõÚ♣Ã¡ÝK0fâ±▬';\r\nexport const iv = 'kå·‼‼Î\"ºè?]»Ãë-^¢Ts+û4÷bS6@Ðt½ÇïÀ▼&I¦W _½↨♀ÀB¸ äjh[H_ý^Ì¶→';\r\n\r\nexport const encrypt = (text: string, pass: string) => {\r\n    let key = forge.pkcs5.pbkdf2(pass, salt, 1000, 16);\r\n    let cipher = forge.cipher.createCipher('AES-CBC', key);\r\n    cipher.start({iv: iv});\r\n    cipher.update(forge.util.createBuffer(text));\r\n    cipher.finish();\r\n    let encrypted = cipher.output;\r\n    return encrypted.getBytes();\r\n}\r\nexport const decrypt = (text: string, pass: string) => {\r\n    let key = forge.pkcs5.pbkdf2(pass, salt, 1000, 16);\r\n    let decipher = forge.cipher.createDecipher('AES-CBC', key);\r\n    decipher.start({iv: iv});\r\n    decipher.update(forge.util.createBuffer(text));\r\n    let result = decipher.finish()\r\n    return decipher.output.getBytes();\r\n}\r\n\r\nconst LOWER = \"abcdefghijklmnopqrstuvwxyz\";\r\nconst UPPER = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\nconst DIGITS = \"0123456789\";\r\nconst SYMBOLS = \"!@#$%^&*()-_=+[]{}\\\\|,.<>/?'\\\"\";\r\n\r\nexport function generatePassword(config: PasswordConfig) {\r\n    let availableChars = LOWER;\r\n    if (config.includeSymbols) {\r\n        availableChars += SYMBOLS;\r\n    }\r\n    if (config.includeUppercase) {\r\n        availableChars += UPPER;\r\n    }\r\n    if (config.includeDigits) {\r\n        availableChars += DIGITS;\r\n    }\r\n\r\n    return Array.apply(null, {'length': config.length})\r\n        .map(function () {\r\n            while (true) {\r\n                const byteArr = new Uint8Array(1);\r\n                window.crypto.getRandomValues(byteArr);\r\n                const char = String.fromCharCode(byteArr[0]);\r\n                if (availableChars.includes(char)) {\r\n                    console.log('char'+char)\r\n                    return char;\r\n                }\r\n            }\r\n        }, this).join('');\r\n}\r\n\r\ninterface PasswordConfig {\r\n    length: number,\r\n    includeSymbols: boolean,\r\n    includeUppercase: boolean,\r\n    includeDigits: boolean,\r\n}\r\n\r\nexport const genRSA = () => {\r\n    let rsa = forge.pki.rsa;\r\n    let keypair = rsa.generateKeyPair({bits: 2048, e: 0x10001});\r\n    return {public: forge.pki.publicKeyToPem(keypair.publicKey), private: forge.pki.privateKeyToPem(keypair.privateKey)}\r\n}\r\n// export const genAES = (bytes: number, text: string) => {\r\n//     let key = forge.random.getBytesSync(bytes)\r\n//     let iv = forge.random.getBytesSync(bytes);\r\n//     let cipher = forge.cipher.createCipher('AES-CBC', key)\r\n//     cipher.start({iv: iv});\r\n//     cipher.update(forge.util.createBuffer(text));\r\n//     cipher.finish();\r\n//     var encrypted = cipher.output;\r\n//     return encrypted.toHex()\r\n// }\r\n\r\n// export const gen3DES = () => {\r\n\r\n// }","import React, {useState,useEffect} from \"react\"\nimport Popup from \"./dashComponents/Popup\"\nimport KeysPopup from \"./dashComponents/KeysPopup\"\nimport StoredPassword from \"./dashComponents/StoredPassword\"\nimport { BsPlusCircleFill } from 'react-icons/bs';\nimport {decrypt,encrypt,genRSA,generatePassword} from './../crypto'\n\n\nconst defaultValue={\n    length:8,\n    symbol:false,\n    uppercase:false,\n    numbers:false\n}\nfunction Dashboard({pass,token}) {\n    const [isOpen, setIsOpen] = useState(false);\n    const [isKeysOpen, setIsKeysOpen] = useState(false);\n    const [passwordGeneratorConfig,setPasswordGeneratorConfig] = useState(defaultValue)\n    const [newPassword, setNewPassword] = useState({})\n    const [newKey, setNewKey] = useState({})\n    const [passwordEntries,setPasswordEntries] = useState([])\n    const [keyEntries, setKeyEntries] = useState([])\n    useEffect(()=>{\n        console.log('in');\n        const getEntries = async ()=>{\n            if(!sessionStorage.getItem('token'))\n                return window.location.href = '/'\n            const result = await fetch('/user/me', {\n                method: 'POST',\n                headers: {\n                    \"Authorization\": sessionStorage.getItem('token')\n                },\n            }).then((res)=>res.json())\n            if(result.status === \"error\") {\n                window.location.href = '/'\n            } else {\n                setPasswordEntries(result.data.passwordEntries)\n                setKeyEntries(result.data.keyEntries)\n            }\n        }\n        getEntries()\n    },[passwordEntries,keyEntries])\n    \n    const togglePopup = () => {\n        setIsOpen(!isOpen);\n        setNewPassword(defaultValue)\n    }\n\n    const toggleKeysPopup = () => {\n        setIsKeysOpen(!isKeysOpen);\n        setNewKey({})\n    }\n\n    const handleSubmit = async (e:React.FormEvent<HTMLButtonElement>) => {\n        e.preventDefault()\n        const result = await fetch('/entries/', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization':sessionStorage.getItem(\"token\"),\n            },\n            body:JSON.stringify({\n                type:'password',\n                username:newPassword['username'],\n                password:newPassword['password']\n            })\n        }).then((res)=>res.json())\n        if(result.status === \"error\") {\n            alert(result.error)\n        } else {\n            console.log(result.data);\n            setPasswordEntries([...passwordEntries,{...newPassword,_id:result.data}])\n        }\n        togglePopup()\n    }\n    const keyHandleSubmit = async(e:React.FormEvent<HTMLButtonElement>) => {\n        e.preventDefault()\n        const result = await fetch('/entries/', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization':sessionStorage.getItem(\"token\"),\n            },\n            body:JSON.stringify({\n                type:'key',\n                username:newKey['username'],\n                password:newKey['password']\n            })\n        }).then((res)=>res.json())\n        if(result.status === \"error\") {\n            alert(result.error)\n        } else {\n            console.log(result.data);\n            setKeyEntries([...keyEntries,{...newKey,_id:result.data}])\n        }\n        toggleKeysPopup()\n    }\n    const handleChange = (e) => {\n        const target = e.target;\n        const {type, name} = target\n        if (type === \"text\" || type === \"number\" || type === \"password\")\n            setNewPassword({...newPassword, [name]: target.value})\n        else\n            setNewPassword({...newPassword, [name]: [target.checked]})\n        \n    }\n    const handleChecks = (e:React.ChangeEvent<HTMLInputElement>) =>{\n        setPasswordGeneratorConfig({...passwordGeneratorConfig,[e.target.name]:e.target.value})\n    }\n\n    const keyHandleChange = (e) => {\n        const target = e.target;\n        const {type, name} = target\n        if (type === \"text\" || type === \"password\")\n            setNewKey({...newKey, [name]: target.value})\n        else\n            setNewKey({...newKey, [name]: target.value})\n    }\n\n    const passwordGenerator = (e:React.FormEvent<HTMLButtonElement>)=>{\n        e.preventDefault()\n        console.log(newPassword);\n        const x = generatePassword({\n            length:passwordGeneratorConfig.length,\n            includeSymbols:passwordGeneratorConfig.symbol,\n            includeDigits:passwordGeneratorConfig.numbers,\n            includeUppercase:passwordGeneratorConfig.uppercase\n        })\n        console.log(x);\n        setNewPassword({...newPassword,password:x})\n    }\n    // Content for the popup\n    const passwordsContent = \n    <>\n        <h1 className=\"popup-title\">Add a new password</h1>\n        <form className=\"popup-form\">\n            <label className=\"text-inputs\">\n                Username:\n                <input type=\"text\"\n                       name=\"username\"\n                       value={newPassword[\"username\"]}\n                       onChange={handleChange}\n                       required\n                />\n            </label>\n            <label className=\"text-inputs\">\n                Password:\n                <input type=\"password\"\n                       name=\"password\"\n                       value={newPassword[\"password\"]}\n                       onChange={handleChange}\n                       required\n                />\n            </label>\n            <button\n            type='button'\n            onClick={passwordGenerator}\n            className=\"generate-password\">\n                Generate Password\n            </button>\n            <label className=\"text-inputs\">\n                Length:\n                <input type=\"number\"\n                       name=\"length\"\n                       value={passwordGeneratorConfig.length}\n                       onChange={handleChecks}\n                />\n            </label>\n            <label className=\"checkbox\">\n                Include Symbols:\n                <input\n                    name=\"symbol\"\n                    type=\"checkbox\"\n                    checked={passwordGeneratorConfig.symbol}\n                    onChange={handleChecks} \n                />\n            </label>\n            <label className=\"checkbox\">\n                Include Numbers:\n                <input\n                    name=\"numbers\"\n                    type=\"checkbox\"\n                    checked={passwordGeneratorConfig.numbers}\n                    onChange={handleChecks} \n                />\n            </label>\n            <label className=\"checkbox\">\n                Include Uppercase Letters:\n                <input\n                    name=\"uppercase\"\n                    type=\"checkbox\"\n                    checked={passwordGeneratorConfig.uppercase}\n                    onChange={handleChecks} \n                />\n            </label>\n\n            <button className=\"popup-btn\"\n                    type=\"button\"\n                    onClick={handleSubmit}\n            >\n                Add password\n            </button>\n        </form>\n    </>\n\n    const keysContent = <>\n        <form className=\"popup-form\">\n\n            <button className=\"generate-key\">\n                Generate Key\n            </button>\n\n            <select name=\"select\"\n                    value={newKey[\"select\"]} \n                    onChange={keyHandleChange}\n            >\n                <option value=\"AES\">AES</option>\n                <option value=\"Triple-DES\">Triple DES</option>\n                <option value=\"RSA\">RSA</option>\n                <option value=\"ECC\">ECC</option>\n            </select>\n            <label className=\"text-inputs\">\n                Key name:\n                <input type=\"text\"\n                       name=\"username\"\n                       value={newKey[\"username\"]}\n                       onChange={keyHandleChange}\n                       required\n                />\n            </label>\n            <label className=\"key-input\">\n                Key:\n                <textarea \n                       name=\"password\"\n                       value={newKey[\"password\"]}\n                       onChange={keyHandleChange}\n                       required\n                />\n            </label>\n\n            <button className=\"popup-btn popup-keys-btn\"\n                    type=\"button\"\n                    onClick={(e)=>{keyHandleSubmit(e)}}\n            >\n                Add key\n            </button>\n        </form>\n    </>\n\n    return (\n        <div className=\"dashboard\">\n            <div className=\"dashboard-buttons\">\n                <button className=\"new-password-btn\"\n                        onClick={togglePopup}>\n                    <BsPlusCircleFill className=\"plus-icon\"/>\n                    New password\n                </button>\n                <button className=\"new-key-btn\"\n                        onClick={toggleKeysPopup}>\n                    <BsPlusCircleFill className=\"plus-icon\"/>\n                    New key\n                </button>\n            </div>\n\n            <div className=\"passwords-container\">\n                <div className=\"passwords\">\n                    <h2>Passwords</h2>\n                    {passwordEntries.map((item,index)=>(\n                        <StoredPassword\n                        type='password'\n                        website={item.username}\n                        password={item.password}\n                        id={item._id}\n                        index={index}\n                        passwordEntries={passwordEntries}\n                        setPasswordEntries={setPasswordEntries}\n                        />\n                    ))}\n                    {/* <StoredPassword\n                        website=\"www.youtube.com\"\n                        password=\"adkajflkajfl;\" \n                    />\n                    <StoredPassword\n                        website=\"www.youtube.com\"\n                        password=\"adkajflkajfl;\" \n                    /> */}\n                </div>\n                <div className=\"keys\">\n                    <h2>Keys</h2>\n                    {keyEntries.map((item,index)=>(\n                        <StoredPassword\n                        type='key'\n                        website={item.username}\n                        password={item.password}\n                        index={index}\n                        id={item._id}\n                        passwordEntries={keyEntries}\n                        setPasswordEntries={setKeyEntries}\n                        />\n                    ))}\n                    {/* <StoredPassword\n                        website=\"www.facebook.com\"\n                        password=\"adadasas1o00;\" \n                    /> */}\n                </div>\n            </div>\n\n            {isOpen && <Popup\n                    content={passwordsContent}\n                    handleClose={togglePopup}\n                />}\n            {isKeysOpen && <KeysPopup\n                    content={keysContent}\n                    handleClose={toggleKeysPopup}\n                />}\n        </div>\n    )\n}\n\nexport default Dashboard","import React, {useState, useEffect} from \"react\"\nimport {Link} from \"react-router-dom\"\n\nfunction Home() {\n    // eslint-disable-next-line\n    const [loggedIn, setLoggedIn] = useState(false)\n\n    // useEffect(() => {\n    //     // fetch\n    //     const requestToken = async () => {\n    //         if(!sessionStorage.getItem(\"token\"))\n    //             setLoggedIn(false);\n    //         const result = await fetch('/user/me', {\n    //             method: 'GET',\n    //             headers: {\n    //                 'Content-Type': 'application/json',\n    //                 \"Authorization\": sessionStorage.getItem(\"token\")\n    //             },\n    //         }).then((res)=>res.json())\n\n    //         if(result.status === \"error\") {\n    //             setLoggedIn(false);\n    //         } else {\n    //             setLoggedIn(true);\n    //         }\n    //     }\n    //     requestToken()\n    // }, [])\n\n    return (\n        <div className=\"home\">\n            <div className=\"home-left\">\n                <h1>Save your <br /> passwords here.</h1>\n                <p>Lorem ipsum is a password storage area that has been\n                    tested for security, so you can store your data here\n                    safely without being afraid of it being stolen by others.</p>\n                <Link to=\"/signup\">\n                    <button className=\"home-signup-btn\">Sign up</button>\n                </Link>\n            </div>\n\n            <div className=\"home-right\">\n                <div className=\"demo-container\"></div>\n            </div>\n        </div>\n    )\n}\n\nexport default Home","import React,{useState} from 'react';\nimport Navbar from \"./components/Navbar\"\nimport Footer from \"./components/Footer\"\nimport SignIn from \"./components/SignIn\"\nimport SignUp from \"./components/SignUp\"\nimport Dashboard from \"./components/Dashboard\"\nimport Home from \"./components/Home\"\nimport './App.css';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport {generatePassword} from './crypto'\nfunction App() {\n  const [token,setToken] = useState<String>('')\n  const [pass,setPass] = useState<String>('')\n  const x = generatePassword({\n    length:10,\n    includeSymbols:true,\n    includeDigits:false,\n    includeUppercase:true\n  })\n  console.log(x);\n  return (\n    <BrowserRouter>\n      <Navbar page=\"Sign up\"/>\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/signup\" element={<SignUp />} />\n        <Route path=\"/signin\" element={<SignIn setToken={setToken} setPass={setPass} />} />\n        <Route path=\"/dashboard\" element={<Dashboard token={token} pass={pass} />} />\n      </Routes>\n      <Footer />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}